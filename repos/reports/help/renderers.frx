<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY nbsp "&#160;">
]>
<html xmlns:frx="urn:FrxReports">
<head>
<title>Custom Renderers</title>
<frx:category>Help</frx:category>
<frx:options hidden="1" />
<frx:parameters>
</frx:parameters>
<frx:docgen />
<frx:fields>
  <frx:field id="title" link="reports/help.renderers#{link}" />
  <frx:field id="role_detail_report" link="reports/drupaladmin.role_detail" target="_blank"> Roles</frx:field>
  <frx:field id="setup_svggraph_report" link="reports/help.setup#svggraph" target="_blank">PHP SVGGraph library</frx:field>
  <frx:field id="state_summary_report" link="reports/sample.state_summary" target="_blank">State Summary</frx:field>
    <frx:field id="state_summary_ie8_report" link="reports/sample.state_summary_ie8"
    target="_blank">External SVG Graph Example</frx:field>
  <frx:field id="watchdog_stats_report" link="reports/drupaladmin.watchdog_stats?prmsev=4" target="_blank">Watchdog Statistics (for entries with severity 4)</frx:field>
</frx:fields>
</head>
<body>
  <div class="toc" id="help-toc-1" frx:block="forena_help/renderers_topics">
    <h3>Including</h3>
    <ul>
      <li id="help-toc-2" frx:foreach="/book/chapters/chapter">{title}<span frx:if="{subtitle}">: {subtitle}.</span></li>
    </ul>

  </div>
  <p>
    A renderer specifies how an object is to rendered (displayed) in the report (or graph) output. A good example is to render
    (produce) a chart using the <a href="http://www.goat1000.com/svggraph.php" target="_blank"> PHP SVGGraph</a> library, as in
    the {state_summary_report} sample report, for which the .frx file includes these lines:
  </p>
<html frx:renderer="FrxSource" id="frxsrc-1">
<head>...
</head>
<body>
  ...
  <div frx:block="sampledb/users_by_state" id="users_by_state-block" class="FrxSVGGraph">
    <svg id="state-chart" frx:renderer="FrxSVGGraph" frx:type="bargraph" frx:xpath="*[total&gt;10000]" frx:color="{color}"
      frx:link="sample.user_distribution_simple?state={state}" frx:series_1="{total}" frx:label="{state}">
      </svg>
  </div>
  ...
</body>
</html>
<h2 id="frxtitle">FrxTitle</h2>
<p>Use the content of this tag as the title of the report (which will override the title specified within a title HTML tag).
  This allows both the page title and the tab title to be replaced by token replaced values in the report.</p>
<p>As an illustration of how to use this renderer, consider the {user_distribution_report} sample report (for state=NJ when
  you first view that report), for which the .frx file includes these lines:</p>
<div frx:renderer="FrxSource">
  <h2 frx:renderer="FrxTitle" id="frx-frxtitle">Users in cities in state {name}</h2>
</div>
<p>
  Because of the attributes we added to the <strong>h2</strong> HTML tag here (you can use any HTML tag to do so), this is what
  will be used as the actual title, while the "2. Report that filters based on state lookup" title (near the top of this .frx
  file) will be ignored.
</p>
<p>
  Moreover, because of the <strong>name</strong> token included in this h2 tag, the rendered title will even be dynamic
  (including the name of the selected state).
</p>
<p>
  For another illustration of this renderer, checkout the video about <a href="http://www.youtube.com/watch?v=7ruWRngKtXY"
    target="_blank">Dynamic page titles in reports</a>.
</p>
<h2 id="frxmyreports">FrxMyReports</h2>
<p>Displays the user's list of reports (excluding hidden reports), optionally limited to a single category, as in this
  example:</p>
<div class="FrxMyReports">
  <div frx:renderer="FrxMyReports" frx:category="Sample" id="frxmyrpts" />
</div>
<p>
  The above sample shows a list of all (not hidden) reports in category <strong>Sample</strong>, using the category as the header
  of it also. This is the (only!) line to be included in the .frx file to produce this display:
</p>
<div frx:renderer="FrxSource">
  <div frx:renderer="FrxMyReports" frx:category="Sample" id="frxmyrpts" />
</div>
<p>The following attributes are supported for the FrxMyReports renderer:</p>
<table>
  <tr>
    <th>frx:category</th>
    <td>Limit the list of reports to be shown to a particular category.</td>
  </tr>
</table>
<h2 id="frxsource">FrxSource</h2>
<p>The FrxSource renderer displays markup as a code snippet. No token replacement is done for the children and all embedded
  code is escaped html. This is used in the {tutorial_reports} to display the source of reports.</p>
<p>
  Here is an example to display such code snippet, using the FrxSource renderer (which was produced by adding <strong>frx:renderer="FrxSource"</strong>
  to the div-tag):
</p>
<div frx:renderer="FrxSource">
  <div frx:renderer="FrxSource">
    <p>Embedded xhtml that you want displayed as source including {tokens} that you want to display without being replaced</p>
  </div>
</div>
<h2 id="frxxml">FrxXML</h2>
<p>Displays the XML of the current data context, which is particularly useful for debugging purposes. If you embed this in a
  report, it will show you the XML data source that is used for token replacement, so it can give you a good idea as to what data
  is being returned and which tokens can be used.</p>
<p>Here is a sample that is displayed (rendered) using the FrxXML renderer, which is actually the data block (in XML format,
  not in SQL format!) containing various details of all chapters in the {wysiwyg_reporting_guide}:</p>

<div class="xml">
  <div frx:renderer="FrxXML" id="frx-frxxml" frx:block="forena_help/reportingwysiwyg_topics"></div>
</div>

<p>Be aware however that this FrxXML renderers seems to NOT display XML comment lines (e.g. those used to specify
  {datablock_security} in XML format).</p>
<p>These are the (only) lines in the .frx file that were needed to display it what is above (whereas the div with the
  class="xml" was only added to apply some CSS styling to XML display):</p>
<div frx:renderer="FrxSource">
  <div frx:renderer="FrxXML" id="frx-frxxml" frx:block="forena_help/reportingwysiwyg_topics" />
</div>
<h2 id="frxparameterform">FrxParamterForm</h2>
<p>
  Customize the standard report parameters input form. Use it on a div tag anywhere within the <strong>body</strong> part of your
  report to control various aspects of the rendering of the parameter form, as in the {role_detail_report} sample report, for
  which the .frx file includes these lines:
</p>
<html frx:renderer="FrxSource">
<head>
...
<frx:parameters>
  <frx:parm id="role" data_source="drupal/roles" type="select">3</frx:parm>
</frx:parameters>
...
</head>
<body>
  ...
  <div frx:renderer="FrxParameterForm" frx:title="Report Execution Parameters" frx:collapsible="1" frx:collapsed="0"
    frx:submit="Show users and their permissions" id="parmeter-form">
    <p>Role Description: {role}</p>
    <p>Select a role and hit the button to run the report.</p>
    <p>{submit}</p>
  </div>
  ...
</body>
</html>
<p>The above example illustrates the following FRX attributes supported by the FrxParameterForm renderer:</p>
<table>
  <tr>
    <th>frx:title</th>
    <td>The title of the parameters field set.</td>
  </tr>
  <tr>
    <th>frx:collapsible</th>
    <td>Indicate if the form should be collapsible or not:
      <ul>
        <li>set to "1" to make the parameter form collapsible.</li>
        <li>set to "0" for a parameter form that cannot be collapsed.</li>
      </ul>
    </td>
  </tr>
  <tr>
    <th>frx:collapsed</th>
    <td>Indicate how a collapsible parameter form should be shown collapsed by default (when the parameter form is first
      shown, prior to any page refreshes):
      <ul>
        <li>set to "1" for a collapsed form.</li>
        <li>set to "0" for a not collapsed form.</li>
      </ul>
    </td>
  </tr>
  <tr>
    <th>frx:submit</th>
    <td>The label of the submit button (note that there is no update or cancel equivalent for parameter forms).</td>
  </tr>
</table>
<p>The children of the FrxParameterForm div allow you to specify the exact layout of the parameters form using
  {skin.forena}'s token replacement syntax, which is illustrated in the above example via the content of the 3 paragraphs
  contained in the FrxParameterForm div. The default context is changed to be the rendered parameter form, so that the parameter
  ids will allow replacement of a form control.</p>
<p>
  <strong>Note</strong>: The parameter form is always rendered at the top (even if you would move it after the data blocks to be
  rendered).
</p>
<h2 id="frxsvggraph">FrxSVGGraph</h2>
<p>Render a graph (chart) using the SVG format, using the {setup_svggraph_report}. Make sure to install this library prior
  to using this renderer (otherwise it cannot work ...).</p>
<p>We'll use the {state_summary_report} sample report to illustrate how to use this renderer, for which the .frx file
  includes these lines:</p>
<div frx:renderer="FrxSource">
  <div frx:block="sampledb/users_by_state" id="users_by_state-block" class="FrxSVGGraph">
    <svg id="state-chart" frx:renderer="FrxSVGGraph" frx:type="bargraph" frx:xpath="*[total&gt;10000]" frx:color="{color}"
      frx:link="sample.user_distribution_simple?state={state}" frx:series_1="{total}" frx:label="{state}">
      </svg>
  </div>
</div>
<p>The following attributes are supported for the FrxSVGGraph renderer:</p>
<table>
  <tr>
    <th>frx:type</th>
    <td>The type of graph to be rendered. If omitted, then <strong>BarGraph</strong> is assumed. These are the currently
      supported types of graphs (any uppercases contained in the type selection are transformed to lowercases automatically during
      its processing):
      <ul>
        <li>BarGraph</li>
        <li>Bar3DGraph</li>
        <li>StackedBarGraph</li>
        <li>GroupedBarGraph</li>
        <li>GroupedBarGraph</li>
        <li>CylinderGraph</li>
        <li>StackedCylinderGraph</li>
        <li>GroupedCylinderGraph</li>
        <li>PieGraph</li>
        <li>Pie3DGraph</li>
        <li>HorizontalBarGraph</li>
        <li>LineGraph</li>
        <li>MultiLineGraph</li>
        <li>ScatterGrap</li>
        <li>MultiScatterGraph</li>
        <li>RadarGraph</li>
        <li>MultiRadarGraph</li>
      </ul></td>
  </tr>
  <tr>
    <th>frx:xpath</th>
    <td>The XPATH expression for the data to be graphed (e.g. <strong>*[total&gt;10000]</strong>, which is what is used in
      the sample (note that only states are included in the graph that have a total above 10000). If omitted, then an XPATH
      expression of <strong>*</strong> (= everything) is assumed.
    </td>
  </tr>
  <tr>
    <th>frx:link</th>
    <td>Create a hyperlink for the data to be graphed (e.g. <strong>sample.user_distribution_simple?state={state}</strong>.
      If omitted, then no link is created.
    </td>
  </tr>
  <tr>
    <th>frx:series</th>
    <td>The column containing the series of the graph. Multiple series may be specified using an attribute of <strong>frx:series_1</strong>
      for the first series, <strong>frx:series_2</strong> as the second and so on.
    </td>
  </tr>
  <tr>
    <th>frx:label</th>
    <td>The label that should be used for the series. Usually this is specified using tokens (e.g. <strong>{state}</strong>
      in our sample here).
    </td>
  </tr>
  <tr>
    <th>frx:options</th>
    <td>This legacy attribute is currently still supported, but it is recommended to replace them by the corresponding <strong>frx:xyz</strong>
      attributes (as further described below). Here is a sample of it was used:<br /> <strong>frx:options="series[]={total}&amp;label={state}&amp;colors[]=green&amp;colors[]=yellow"</strong></td>
  </tr>
</table>
<p>
  In addition to the attributes mentioned above, any attribute (such as <strong>xyz</strong>) supported as PHP SVGGraph options
  may be included as <strong>frx:xyz</strong> attributes also. Here are a few examples of some often used attributes:
</p>

<table>
  <tr>
    <th>frx:color</th>
    <td>Specify a graph color (e.g. <strong>frx:color="{color}"</strong>). To specify multiple graph colors, you can specify
      <strong>frx:color_1="red"</strong> and <strong>frx:color_2="blue"</strong> also.
    </td>
  </tr>
  <tr>
    <th>frx:width</th>
    <td>Width of the graph to be rendered (e.g. <strong>frx:width="720"</strong>). If omitted, then <strong>600</strong> is
      assumed.
    </td>
  </tr>
  <tr>
    <th>frx:height</th>
    <td>Width of the graph to be rendered (e.g. <strong>frx:height="480"</strong>). If omitted, then <strong>400</strong> is
      assumed.
    </td>
  </tr>
</table>
<p>
  To illustrate the power of these <strong>frx:xyz</strong> attributes, consider this example:
</p>
<div frx:renderer="FrxSource">
  <div frx:block="sampledb/users_by_state" id="users_by_state-block" class="FrxSVGGraph">
    <svg id="state-chart" frx:renderer="FrxSVGGraph" frx:type="bargraph" frx:xpath="*[total&gt;10000]" frx:color="{color}"
      frx:link="sample.user_distribution_simple?state={state}" frx:series_1="{total}" frx:label="{state}" frx:height="300"
      frx:width="450" frx:axis_min_h="12500" frx:grid_division_h="500" frx:division_size_h="10" frx:division_size_v="0"
      frx:show_subdivisions="true" frx:subdivision_size="5" frx:graph_title_colour="red" frx:graph_title="Enhanced State Graph"
      frx:graph_title_position="top" frx:graph_title_font_weight="bold" frx:graph_title_font="georgia"
      frx:graph_title_font_size="18" frx:label_h="Total nr of users" frx:label_v="State" frx:label_font="georgia"
      frx:label_font_size="14" frx:label_colour="blue" frx:axis_text_angle_h="-60" frx:back_colour="white">
      </svg>
  </div>
</div>
<p>
  <strong>Note</strong>: checkout the {svggraph_library} documentation to fully understand those options.
</p>
<h2 id="frxinclude">FrxInclude</h2>
  <p>This renderer includes another report as an asset with the appropriate tag. The primary use of this renderer is to
    create references to external SVG assets. When rendered in a web page, these need to be wrapped in embed tags, but when being
    included in a PDF document the raw SVG should be included. The {state_summary_ie8_report} report uses this renderer, for which
    the .frx file includes these lines:
  </p>
  
  <div frx:renderer="FrxSource">
    <div frx:src="reports/sample.state_graph.svg?height=400&amp;width=600" frx:renderer="FrxInclude" frx:height="480"
      frx:width="640">...</div>
  </div>
  <p>
  The above example illustrates the following FRX attributes supported by the FrxInclude renderer:
  </p>
  <table>
    <tr>
      <th>frx:src</th>
      <td>The relative URL to the report asset that is to be rendered.</td>
    </tr>
    <tr>
      <th>frx:height</th>
      <td>The height of the report asset that is to be rendered.</td>
    </tr>
    <tr>
      <th>frx:width</th>
      <td>The width of the report asset that is to be rendered.</td>
    </tr>
  </table>
  <p>Some extra details about how this renderer processes various types of assets:
  </p>
  
  <ul>
    <li>The tags used to actually render the specified asset, depends on the file extension of the asset (= what is followed
      by the last "." in the relative URL).</li>
    <li>These are the main groups of supported extensions for the assets:</li>
    <ol>
      <li><strong>svg</strong>: wrapped in an <strong>embed</strong> tag (using a <strong>src</strong> tag as specified in the
        frx:src attribute), using <strong>height</strong> and <strong>width</strong> as specified in the frx attributes, and with an
        <strong>image/svg+xml</strong> MIME type (which is assumed to be supported by the web server).</li>
      <li><strong>png, gif, jpg or jpeg</strong>: wrapped in an <strong>img</strong> tag (using a <strong>src</strong> tag as
        specified in the frx:src attribute), using <strong>height</strong> and <strong>width</strong> as specified in the frx
        attributes.</li>
      <li><strong>other extensions</strong>: wrapped in an <strong>a</strong> tag (anchor), using an the anchor text like <strong>abcd
          document</strong> (abcd = the file extension), and with its <strong>href</strong> as specified in the frx:src attribute.</li>
    </ol>
    <li>Any lowercase / uppercases variations in the file extension of the asset are supported.</li>
  </ul>

<h2 id="frxcrosstab">FrxCrosstab</h2>
<p>
  A <strong>crosstab</strong> table is a table with a special layout. More specific it is formatted as a grid, with:
</p>

<ul>
  <li>the <strong>rows</strong> representing one or more (combinations of) facts, such as countries or regions, names of
    persons (or users) like employees / salespeople (or user IDs / user names), etc.
  </li>
  <li>the <strong>columns</strong> representing one or more other facts, such as periods (months of a year, years, etc),
    available types/flavors of something (like types of errors), etc.
  </li>
  <li>the <strong>intersections of rows and columns</strong> containing the actual information (data), such as summarized
    information (counts of something), timestamps, etc. and which might (optionally) include an hyperlink to a drill-down report.
  </li>
</ul>
<h2>Examples of crosstab tables</h2>
<p>
  As an example, consider the {watchdog_stats_report}, of which the data in the report will depend on the content of your Drupal
  logs. So the content may vary a bit (and might not include all the samples described below). If needed, experiment a bit with
  the available report parameters until the table includes a few rows (between 5 and 15?), and a few columns (to the right,
  between 3 and 10?) with a header starting with <strong>Msg type:</strong>). Note that the 'Msg type:' in some of the headers
  was only added to help explain the concept of a crosstab table (probably omitted in real crosstab tables).
</p>
<p>The layout of this example table is follows:</p>

<ul>
  <li>the <strong>rows</strong> to the left (with table headers that do NOT start with <strong>Msg type:</strong>) represent
    the facts about (the combination of) <strong>error message, severity and user</strong>, as contained in the Watchdog logging.
  </li>
  <li>the <strong>columns</strong> to the right (with table headers starting with <strong>Msg type:</strong>) represent the
    various flavors of <strong>error types</strong>, as contained in in the Watchdog logging.
  </li>
  <li>the <strong>intersections of rows and columns</strong> contain (visualize) the actual information (data), i.e. the <strong>number
      of occurrences for the specific error type</strong> as contained in the Watchdog logging. These intersections also include an
    hyperlink to a drill-down report, corresponding to the selected row (= error message, severity and user) and column (= error
    type).
  </li>
</ul>
<p>
  For another example of a crosstab table, just follow (click) any of the hyperlinks in this previous example (which opens the
  corresponding drill-down report). This drill-down report is yet another example of a crosstab table, though it's a bit harder
  to realize, because it actually only contains 1 column for the specific error type that was selected (= the last column to the
  right, with a header starting with 'Msg Type'). Go ahead and change the report parameters of this drill-down report, by NOT
  selecting any <strong>Type of log messages</strong>, leaving all other report parameters unchanged (such as the previously
  selected <strong>severity</strong>), and refreshing the report. This most probably will create multiple columns to the right
  (with headers starting with 'Msg Type'). If it doesn't, then further refine the report parameters by NOT selecting any <strong>Log
    messages severity</strong>, or changing that report parameter to another Log messages severity.
</p>
<p>
  The major difference between these 2 examples is about the actual actual information (data) shown in the intersection of
  columns. I.e. the 1st example shows <strong>aggregated data</strong> (in this case a COUNT of occurrences of the combinations
  of error message, severity and user), while the 2nd example shows the <strong>details</strong> (specific timestamps) for the
  selected combination of error message, severity and user. Or to put it in another way: the 1st example provides a 30,000 feet
  (or 10.000 m) view of what's happening (events) in your environment, while the 2nd example provides the exact details of any of
  these events.
</p>
<p>
  The above examples were created using the <strong>FrxCrosstab</strong> renderer. Here are the relevant lines included in the
  .frx file to produce the crosstab display of the 1st example (checkout the .frx file of the 2nd example for a similar
  illustration):
</p>

<div frx:renderer="FrxSource">
  <div id="watchdog_stats_block" class="FrxCrosstab" frx:block="drupal/watchdog_stats">
    <table watchdog_stats="watchdog_stats-renderer" frx:renderer="FrxCrosstab" frx:group="{message}{severity}{name}"
      frx:dim="Msg Type: {type}">
      <thead>
        <tr>
          <th>Message</th>
          <th>Severity</th>
          <th>User Name</th>
          <td>Nr of msgs</td>
        </tr>
      </thead>
      <tbody>
        <tr id="watchdog_stats" frx:watchdog_stats="watchdog_stats-renderer">
          <th>{message}</th>
          <th>{severity}</th>
          <th>{name}</th>
          <td>{typecount}</td>
        </tr>
      </tbody>
    </table>
  </div>

</div>

<p>Some more details about the fields definitions shown in the above .frx file (shown here for the sake of completeness, but
  which are not really "needed" for creating a table using the FrxCrosstab renderer):</p>

<ul>
  <li>the frx:field <strong>name</strong> is used to display <strong>"Anonymous"</strong> (as the User Name) for log
    messages created without a name of the user (i.e. an Anonymous user).
  </li>
  <li>the frx:field <strong>typecount</strong> is used to create an hyperlink from the actual <strong>data</strong> (counts)
    that are shown in the report.
  </li>
</ul>
<p>Some more details about the above .frx file to actually create a table using the FrxCrosstab renderer:</p>

<ul>
  <li>the <strong>div</strong> tag contains the frx:block (pointing to <strong>watchdog_stats</strong> in the <strong>drupal</strong>
    directory/folder) for which the data are to be visualized in the crosstab table. The class for this div tag can be anything,
    though FrxCrosstab seems a good convention. It's important for the div tag to have an id starting with the name of the data
    block (=<strong>watchdog_stats</strong>), and to which <strong>_block</strong> is appended.
  </li>
  <li>use these attributes within the <strong>table</strong> tag:
    <ul>
      <li>enable the FrxCrosstab renderer via <strong>frx:renderer="FrxCrosstab"</strong>.
      </li>
      <li>include an attribute similar to <strong>watchdog_stats="watchdog_stats-renderer"</strong>, whereas watchdog_stats is
        the name of the data block (replace by the correct data block name) and <strong>-renderer</strong> is a hardcoded suffix.
      </li>
      <li>use <strong>frx:group</strong> to indicate which data field elements should be used to group the rows (by using the
        brace token replacement syntax).
      </li>
      <li>use <strong>frx:dim</strong> to generate a column (to the right of the table) for each value of the dimension
        attribute (by using the brace token replacement syntax), whereas each dimension <strong>value</strong> will also be used as
        the column header of those columns.
      </li>
    </ul>
  </li>
  <li>use the <strong>thead</strong> section (within the table tag) to specify the <strong> content of the header
      of the rendered table</strong>:
    <ul>
      <li>the content of the <strong>th</strong> elements will be used as the (fixed) column <strong>headers</strong> for the
        columns to the left of the crosstab table (= the columns mentioned within the <strong>frx:group</strong> also, and in the
        same order).
      </li>
      <li>the content of the <strong>td</strong> element describes the values that will be generated for each <strong>dimension</strong>
        value (as mentioned within the <strong>frx:dim</strong>), though it is not actually rendered anywhere in the crosstab table
        output (it is merely used as documentation within the .frx file).
      </li>
    </ul>
  </li>
  <li>use the <strong>tr</strong> element of the <strong>tbody</strong> section (within the table tag) to <strong>identify
      the data block for the rows</strong> to be rendered:
    <ul>
      <li>the <strong>id</strong> must be equal to the name of the data block (=<strong>watchdog_stats</strong>).
      </li>
      <li>it must contain an attribute similar to <strong>frx:watchdog_stats="watchdog_stats-renderer"</strong>, whereas
        watchdog_stats is the name of the data block (replace by the correct data block name), and <strong>-renderer</strong> is a
        hardcoded suffix (by omitting the frx: part of it, it should match the <strong>watchdog_stats="watchdog_stats-renderer"</strong>
        attribute for the table tag).
      </li>
    </ul>
  </li>
  <li>use the <strong>th</strong> and <strong>td</strong> elements of the <strong>tbody</strong> section (within the table
    tag) to specify the <strong>content of the body of the rendered table</strong> (by using the brace token replacement syntax):
    <ul>
      <li>the content of the <strong>th</strong> elements will be used as the (fixed) column <strong>values</strong> for the
        columns to the left of the crosstab table (= the columns mentioned within the <strong>frx:group</strong> also, and in the
        same order).
      </li>
      <li>the content of the <strong>td</strong> element will be used as the column <strong>values</strong> for the columns to
        the right of the crosstab table (= the columns that will be generated for each <strong>dimension</strong> value as mentioned
        within the <strong>frx:dim</strong>).
      </li>
    </ul>
  </li>
</ul>
</body>
</html>
