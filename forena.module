<?php
/**
 * Implementation of hook_menu. 
 *
 * @return array
 */
function forena_menu() { 
  $items = array(); 
  $items['ft'] = array(
    'page callback' => 'forena_test', 
    'page arguments' => array(), 
    'title' => t('Forena Testing'),
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK, 
  ); 

  $items['admin/settings/forena'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forena_settings'), 
    'title' => 'Forena Reports', 
    'description' => t('Tell Forena where to store report files and how users should access them.'),
    'access arguments' => array('administer forena reports'),
    'type' => MENU_NORMAL_ITEM, 
    'file' => 'forena.admin.inc', 
  ); 

  $path = variable_get('forena_path', 'reports'); 
  $items[$path] = array(
    'page callback' => 'forena_report',
    'page arguments' => array(), 
    'title' => t('Reports'),
    'access arguments' => array('access content'),  
    'type' => MENU_NORMAL_ITEM, 
   ); 

  return $items; 
}

/**
 * Implementation of hook_perm
 *
 * @return unknown
 */
function forena_perm() { 
  $perms = array(
    'create any report', 
    'design any report',
    'administer forena reports'
  ); 
  //@TODO: Add the ability to create subrepositories with different permissions. 
  return $perms; 
}

/**
 * Test function for white box testing. 
 *
 * @return unknown
 */
function forena_test() { 
  $output .= 'Forena test page'; 
  
  return $output; 
}

function forena_report() {
  $arg_list = func_get_args();
  require_once('forena.common.inc');  
  
  // Concat argument to function to get a path
  $f_path = variable_get('forena_path', 'reports');
  foreach ($arg_list as $arg) {
       $report_name .= '/'. $arg; 
  }
  $report_name = trim($report_name, '/'); 
  
  $report_path = forena_report_path();
  list($name, $format) = explode('.', $report_name, 2);  
  if ($name) { 
    $filename = $report_path . '/'. $name . '.frx';
    if (file_exists($filename)) {
      $r_text = file_get_contents($filename);  
      try { 
        $r = new SimpleXMLElement($r_text);
      } catch (Exception $e) { 
        forena_error('Unable to read report', $e->getMessage()); 
      }
      $parms = $_GET; 
      unset($parms['q']); 
      $output .= forena_render_report($r, $format, $parms); 
    } 
    else { 
      drupal_not_found(); 
    }
  } 
  else { 
    // @TODO: List reports 
    $result = db_query('SELECT * FROM {forena_reports} ORDER BY title asc');
    $output .= '<ul>'; 
    while ($row = db_fetch_object($result)) {
       $output .= '<li>'. l($row->title, variable_get('forena_path', 'reports') .'/'. $row->report_name) .'</li>';
    }
    $output .= '</ul>'; 
  }
  return $output; 
}

/**
 * Render report with some data
 *
 * @param unknown_type $report
 * @param unknown_type $format
 * @param unknown_type $data
 * @return unknown
 */
function forena_render_report($report, $format='', $data='') {
  require_once('forena.common.inc');    
  $o = new FrxReport($report, $data);
  $output = $o->render($format); 
  return $output;  
}

/**
 * Self register plugins with forena. 
 *
 */
function forena_forena_plugins() { 
  $plugins[] = array('file' => 'plugins/FrxPDO.inc', 
                     'type' => 'data',
                     'class' => 'FrxPDO', 
                     );
  $plugins[] = array('file' => 'plugins/FrxOracle.inc', 
                     'type' => 'data',
                     'class' => 'FrxOracle', 
                     );
  $plugins[] = array('file' => 'plugins/FrxDrupal.inc', 
                     'type' => 'data', 
                     'class' => 'FrxDrupal',
                     ); 
  $plugins[] = array('file' => 'plugins/FrxFiles.inc', 
                     'type' => 'data', 
                     'class' => 'FrxFiles',
                     ); 
  return $plugins; 
}




