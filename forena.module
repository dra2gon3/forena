<?php
/**
 * Implementation of hook_menu. 
 *
 * @return array
 */
function forena_menu() { 
  $items = array(); 

  $items['admin/settings/forena'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forena_settings'), 
    'title' => 'Forena Reports', 
    'description' => t('Tell Forena where to store report files and how users should access them.'),
    'access arguments' => array('administer forena reports'),
    'type' => MENU_NORMAL_ITEM, 
    'file' => 'forena.admin.inc', 
  ); 


  $items['reports/%'] = array(
    'page callback' => 'forena_report',
    'page arguments' => array(1), 
    'title' => t('Reports'),
    'access arguments' => array('access content'),  
    'type' => MENU_CALLBACK, 
   ); 

   $items['reports/%/view'] = array(
    'title' => t('View'),
    'type' => MENU_DEFAULT_LOCAL_TASK, 
    'weight' => -10, 
   ); 
   
   $items['reports/%/edit'] = array(
     'title' => 'Edit',
     'page callback' => 'forena_edit_report',
     'page arguments' => array(1),
     'access arguments' => array('design any report'),     
     'description' => t('Edit the content of your node'),   
     'type' => MENU_LOCAL_TASK, 
   );
   
   $items['reports/%/parameters'] = array(
     'title' => 'Params',
     'page callback' => 'forena_parameters_report',
     'page arguments' => array(1),
     'access arguments' => array('design any report'),     
     'description' => t('Edit the parameters of your report'),
     'weight' => -5,   
     'type' => MENU_LOCAL_TASK, 
   );
   
  $items['forena'] = array(
    'page callback' => 'forena_user_reports',
    'page arguments' => array(), 
    'title' => t('My Reports'),
    'access arguments' => array('list reports'),  
    'type' => MENU_NORMAL_ITEM, 
   ); 
   
  return $items; 
}
/**
 *  Calls forena_edit_form
 *  in forena.admin.inc   
 */
function forena_edit_report() {
  require_once('forena.admin.inc');  
  return drupal_get_form('forena_edit_form');
}

/**
 *  Calls forena_parameter_form
 *  in forena.admin.inc
 */
function forena_parameters_report() {
	require_once('forena.admin.inc');
	return drupal_get_form('forena_parameters_form');
}

/**
 * Implementation of hook_perm
 *
 * @return unknown
 */
function forena_perm() { 
  $perms = array(
    'administer forena reports', 
    'list reports', 
    'create any report', 
    'design any report',
    ); 
  //@TODO: Add the ability to create subrepositories with different permissions. 
  return $perms; 
}

/**
 * Load and render a report based on a drupal path. 
 * In this function the arglist is used to get the full path to the report. 
 *
 * @return unknown
 */
function forena_report() {
  $arg_list = func_get_args();
  require_once('forena.common.inc');  
  
  // Concat argument to function to get a path
  $f_path = variable_get('forena_path', 'reports');
  foreach ($arg_list as $arg) {  	   
    $report_name .= '/'. $arg; 
  }  
  $report_name = trim($report_name, '/');   
  $report_path = forena_report_path();  
  list($name, $format) = explode('.', $report_name, 2);
   
  if ($name) { 
    $filename = $report_path . '/'. $name . '.frx';
    if (file_exists($filename)) {
      $r_text = file_get_contents($filename);         
      try { 
        $r = new SimpleXMLElement($r_text);         
      } catch (Exception $e) { 
        forena_error('Unable to read report', $e->getMessage()); 
      }
      $parms = $_GET; 
      unset($parms['q']); 
      $output .= forena_render_report($r, $format, $parms); 
    } 
    else { 
      drupal_not_found(); 
    }
  } 
  else {
    drupal_not_found();  
  }
  return $output; 
}

function forena_user_reports() {   
  $result = db_query('SELECT * FROM {forena_reports} where hidden=0 ORDER BY category,title asc');
  $categories = array(); 
  while ($row = db_fetch_object($result)) { 	
    $cache = $row->cache; 
        
    if ($cache) {            
      $cache = unserialize($cache);
      $access = FALSE; 
      
      // Check each callback function to see if we have an error. 
      foreach ($cache['access'] as $callback => $args) {      			
        if ($callback && $args) foreach ($args as $arg) {           
          if (function_exists($callback)) { 
            $a = $callback($arg); 
          }
          if ($a) $access = TRUE;           
        } 
        else {          
          $access = FALSE; 
        }
      }
    }    
    if ($access) {      
      $categories[$row->category][] = array(
        'title' => $row->title, 
        'report_name' => $row->report_name, 
      );
    }   
  }
  $report_repos = variable_get('forena_path', 'reports'); 
  
  foreach ($categories as $category => $reports) {
  	
    $output .= '<h3>'. $category .'</h3>';  
    $output .= '<ul>'; 
    foreach ($reports as $r) { 
      $output .= '<li>'. l($r['title'], $report_repos .'/'. $r['report_name']) .'</li>';  
    }
  }
  $output .= '</ul>'; 
  return $output; 
}

/**
 * Render report with some data
 *
 * @param unknown_type $report
 * @param unknown_type $format
 * @param unknown_type $data
 * @return unknown
 */
function forena_render_report($report, $format='', $data='') {
  require_once('forena.common.inc');    
  $o = new FrxReport($report, $data);
  $output = $o->render($format); 
  return $output;  
}

/**
 * Self register plugins with forena. 
 *
 */
function forena_forena_plugins() { 
  $plugins[] = array('file' => 'plugins/FrxPDO.inc', 
                     'class' => 'FrxPDO', 
                     );
  $plugins[] = array('file' => 'plugins/FrxOracle.inc', 
                     'class' => 'FrxOracle', 
                     );
  $plugins[] = array('file' => 'plugins/FrxDrupal.inc', 
                     'class' => 'FrxDrupal',
                     ); 
  $plugins[] = array('file' => 'plugins/FrxFiles.inc', 
                     'class' => 'FrxFiles',
                     ); 
  return $plugins; 
}

/**
 * Self register controls with forena. 
 *
 */
function forena_forena_controls() { 
  $controls[] = array('file' => 'plugins/FrxControls.inc', 
                     'class' => 'FrxControls', 
                     );
  return $controls; 
}


